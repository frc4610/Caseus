// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robot builder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating auto generated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4610.Test;


import org.usfirst.frc4610.Test.commands.Retrieve;
import org.usfirst.frc4610.Test.commands.CleanandStand;
import org.usfirst.frc4610.Test.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;



/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */


public class OI {
    //// CREATING BUTTONS
    // One type of button is a joy-stick button which is any button on a joy-stick.
    // You create one by telling it which joy-stick it's on and which button
    // number it is.
    // Joy-stick stick = new Joy-stick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by sub-classing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	//ALL OF THE EXTERNAL CONTROLLERS AND BUTTONS ARE DEFINED HERE
    public JoystickButton joystickButton1;
    public JoystickButton joystickButton2;
    public JoystickButton joystickButton3;
    public JoystickButton joystickbutton4;
    public JoystickButton joystickbutton6;
    public JoystickButton joystickbutton7;
    //public JoystickButton joystickbutton5;
    public Joystick leftJoystick;
    public Joystick rightJoystick;
    public Joystick controller;
    public JoystickButton clean;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	
    	
    	//PLACING/REDEFINITIONS
    	rightJoystick = new Joystick(1);
        leftJoystick = new Joystick(0);
        
        //BINDING COMMANDS TO BUTTONS
        joystickButton1 = new JoystickButton(leftJoystick, 5);
        joystickButton1.whileHeld(new Retrieve());
        
        joystickButton2 = new JoystickButton(leftJoystick, 6);
        joystickButton2.whileHeld(new Expell());
        
        joystickButton3 = new JoystickButton(leftJoystick, 3);
        joystickButton3.whileHeld(new CleanandStand());
        
        joystickbutton4 = new JoystickButton(leftJoystick, 1);
        joystickbutton4.whileHeld(new Takeadump());
        
        //joystickbutton4 = new JoystickButton(leftJoystick, 8);
        //joystickbutton4.whenPressed(new AutonomousCommand());
        
        joystickbutton4 = new JoystickButton(leftJoystick, 4);
        joystickbutton4.whileHeld(new climb());
        
        //joystickbutton5 = new JoystickButton(leftJoystick, 8);
        //joystickbutton5.whenPressed(new Diagnostic());
        
        //clean = new JoystickButton(controller, 1);
        //clean.whenPressed(new CleanandStand());
        //joystickButton2.whenPressed(new ServoClose());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Move", new Move());
        SmartDashboard.putData("Retrieve", new Retrieve());
        SmartDashboard.putBoolean("Right",RobotMap.scissorLimitSwitch1.get());
        SmartDashboard.putBoolean("Right",RobotMap.scissorLimitSwitch2.get());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }

	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


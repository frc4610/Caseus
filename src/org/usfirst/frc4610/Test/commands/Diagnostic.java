// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4610.Test.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4610.Test.Robot;
import org.usfirst.frc4610.Test.RobotMap;

// The idea around this command is to test the robots movement using all 
// of the subsystems and motors. This is intended to catch mechanical errors
// BEFORE we go onto the field for a match

//VERY IMPORTANT!!!
//before EACH AND EVERY MATCH make sure to comment out the entire command line for
//button 5 in the IO Class
public class Diagnostic extends Command {


    public Diagnostic() {

    }
    protected void initialize() {
    }


    protected void execute() {

    	RobotMap.driveTrainleftBack.set(1.0);
    	RobotMap.driveTrainleftFront.set(1.0);
    	RobotMap.driveTrainrightBack.set(-1.0);
    	RobotMap.driveTrainrightFront.set(-1.0);


    	for(int b=0; b>300; b++){
        RobotMap.driveTrainleftBack.set(-1.0);
        RobotMap.driveTrainleftFront.set(-1.0);
        RobotMap.driveTrainrightBack.set(1.0);
        RobotMap.driveTrainrightFront.set(1.0);
        }
    	for(int c=0; c>200; c++){
        RobotMap.driveTrainleftBack.set(-1.0);
        RobotMap.driveTrainleftFront.set(-1.0);
        RobotMap.driveTrainrightBack.set(-1.0);
        RobotMap.driveTrainrightFront.set(-1.0);
        }
    	for(int d=0; d>200; d++){
        RobotMap.driveTrainleftBack.set(1.0);
        RobotMap.driveTrainleftFront.set(1.0);
        RobotMap.driveTrainrightBack.set(1.0);
        RobotMap.driveTrainrightFront.set(1.0);
        }
    	RobotMap.driveTrainleftBack.set(1.0);
        RobotMap.driveTrainleftFront.set(1.0);
        RobotMap.driveTrainrightBack.set(1.0);
        RobotMap.driveTrainrightFront.set(1.0);
    	for(int e=0; e>300; e++){
    		RobotMap.retrieveBeltSpeedController1.set(-1.0);
        }
    	for(int f=0; f>300; f++){
    		RobotMap.retrieveBeltSpeedController1.set(1.0);
        }
    	for(int g=0; g>300; g++){
    		RobotMap.retrieveBeltSpeedController1.set(1.0);
        }
    	
        	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	RobotMap.driveTrainleftBack.set(0.0);
    	RobotMap.driveTrainleftFront.set(0.0);
    	RobotMap.driveTrainrightBack.set(0.0);
    	RobotMap.driveTrainrightFront.set(0.0);
    	
    	RobotMap.retrieveBeltSpeedController1.set(0.0);
    	
    	RobotMap.scissorerScissors.set(0.0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
